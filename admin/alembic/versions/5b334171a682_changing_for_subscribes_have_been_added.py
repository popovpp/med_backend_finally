"""changing for subscribes have been added!

Revision ID: 5b334171a682
Revises: 88115ae54f9e
Create Date: 2024-02-21 14:35:03.298135

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5b334171a682'
down_revision: Union[str, None] = '88115ae54f9e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('subscribe_roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('client_id', sa.BigInteger(), nullable=True, comment='Идентификатор роли в системе клиента'),
    sa.Column('name', sa.String(length=200), nullable=False, comment='Наименование'),
    sa.Column('description', sa.Text(), nullable=True, comment='Описание'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Флаг активно/неактивно'),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица "Роли в абонементе"'
    )
    op.create_index(op.f('ix_subscribe_roles_id'), 'subscribe_roles', ['id'], unique=False)
    op.add_column('policies', sa.Column('medical_center_id', sa.Integer(), nullable=True, comment='Идентификатор медицинского центра'))
    op.create_foreign_key(None, 'policies', 'medical_centers', ['medical_center_id'], ['id'])
    op.add_column('subscribes_doctors', sa.Column('doctor_mcenters_id', sa.Integer(), nullable=False, comment='Идентификатор доктора'))
    op.alter_column('subscribes_doctors', 'start_date',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_comment='Начальная дата периода задействования доктора')
    op.alter_column('subscribes_doctors', 'end_date',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_comment='Конечная дата периода Задействования доктора')
    op.drop_constraint('subscribes_doctors_doctor_id_fkey', 'subscribes_doctors', type_='foreignkey')
    op.create_foreign_key(None, 'subscribes_doctors', 'subscribe_roles', ['role_id'], ['id'])
    op.create_foreign_key(None, 'subscribes_doctors', 'doctors_medical_centers', ['doctor_mcenters_id'], ['id'])
    op.drop_column('subscribes_doctors', 'doctor_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('subscribes_doctors', sa.Column('doctor_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Идентификатор доктора'))
    op.drop_constraint(None, 'subscribes_doctors', type_='foreignkey')
    op.drop_constraint(None, 'subscribes_doctors', type_='foreignkey')
    op.create_foreign_key('subscribes_doctors_doctor_id_fkey', 'subscribes_doctors', 'doctors', ['doctor_id'], ['id'])
    op.alter_column('subscribes_doctors', 'end_date',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_comment='Конечная дата периода Задействования доктора')
    op.alter_column('subscribes_doctors', 'start_date',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_comment='Начальная дата периода задействования доктора')
    op.drop_column('subscribes_doctors', 'doctor_mcenters_id')
    op.drop_constraint(None, 'policies', type_='foreignkey')
    op.drop_column('policies', 'medical_center_id')
    op.drop_index(op.f('ix_subscribe_roles_id'), table_name='subscribe_roles')
    op.drop_table('subscribe_roles')
    # ### end Alembic commands ###
