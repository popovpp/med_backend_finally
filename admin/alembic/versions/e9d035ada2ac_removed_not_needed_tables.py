"""Removed not needed tables!

Revision ID: e9d035ada2ac
Revises: 08a3eb208780
Create Date: 2023-11-16 14:35:34.301097

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e9d035ada2ac'
down_revision: Union[str, None] = '08a3eb208780'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_users_schedules_id', table_name='users_schedules')
    op.drop_table('users_schedules')
    op.drop_index('ix_doctors_schedulers_id', table_name='doctors_schedulers')
    op.drop_table('doctors_schedulers')
    op.drop_index('ix_users_documents_id', table_name='users_documents')
    op.drop_table('users_documents')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users_documents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Идентификатор пользователя'),
    sa.Column('document_type_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Идентификатор типа документа'),
    sa.Column('request_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False, comment='Дата запроса документа'),
    sa.Column('is_needed_paper_original', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Флаг нужен/не нужен бумажный оригинал'),
    sa.Column('status', sa.INTEGER(), autoincrement=False, nullable=False, comment='Статус документа'),
    sa.Column('document_url', sa.VARCHAR(length=200), autoincrement=False, nullable=True, comment='Ссылка для скачивания документа'),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True, comment='Дополнительная информация к документу'),
    sa.ForeignKeyConstraint(['document_type_id'], ['documents_types.id'], name='users_documents_document_type_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='users_documents_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='users_documents_pkey'),
    comment='Таблица "Документы пользователя"'
    )
    op.create_index('ix_users_documents_id', 'users_documents', ['id'], unique=False)
    op.create_table('doctors_schedulers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('doctor_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Идентификатор доктора'),
    sa.Column('plan_visit_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Плановые дата и время получения услуги'),
    sa.Column('paln_visit_duration', sa.INTEGER(), autoincrement=False, nullable=False, comment='Плановая длительность оказания услуги в минутах'),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True, comment='Описание платежной системы'),
    sa.Column('is_available', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Флаг доступен/недоступен'),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.id'], name='doctors_schedulers_doctor_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='doctors_schedulers_pkey'),
    comment='Таблица "Расписание доктора"'
    )
    op.create_index('ix_doctors_schedulers_id', 'doctors_schedulers', ['id'], unique=False)
    op.create_table('users_schedules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('client_rnumb_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Идентификатор выданного пользователю номерка в системе Клиента'),
    sa.Column('plan_visit_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Плановые дата и время получения услуги'),
    sa.Column('paln_visit_duration', sa.INTEGER(), autoincrement=False, nullable=False, comment='Плановая длительность оказания услуги в минутах'),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Идентификатор пользователя'),
    sa.Column('service_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Идентификатор услуги'),
    sa.Column('doctor_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Идентификатор доктора'),
    sa.Column('payment_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Идентификатор платежя'),
    sa.Column('subscription_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Идентификатор абонемента пользователя'),
    sa.Column('user_comments', sa.TEXT(), autoincrement=False, nullable=True, comment='Комментарий пользователя (ремемба)'),
    sa.Column('visit_was_done', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Флаг услуги получена/не получена'),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Флаг активен/не активен'),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.id'], name='users_schedules_doctor_id_fkey'),
    sa.ForeignKeyConstraint(['payment_id'], ['users_payments.id'], name='users_schedules_payment_id_fkey'),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], name='users_schedules_service_id_fkey'),
    sa.ForeignKeyConstraint(['subscription_id'], ['users_subscriptions.id'], name='users_schedules_subscription_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='users_schedules_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='users_schedules_pkey'),
    comment='Таблица "Расписание посещений пользователя (пациента)"'
    )
    op.create_index('ix_users_schedules_id', 'users_schedules', ['id'], unique=False)
    # ### end Alembic commands ###
